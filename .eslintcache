[{"/Users/nathanlangridge/Desktop/Project/spacex-launches/src/index.js":"1","/Users/nathanlangridge/Desktop/Project/spacex-launches/src/App.js":"2","/Users/nathanlangridge/Desktop/Project/spacex-launches/src/reportWebVitals.js":"3","/Users/nathanlangridge/Desktop/Project/spacex-launches/src/Containers/LaunchContainer.js":"4","/Users/nathanlangridge/Desktop/Project/spacex-launches/src/Components/LaunchSelector.js":"5","/Users/nathanlangridge/Desktop/Project/spacex-launches/src/Components/LaunchDetail.js":"6","/Users/nathanlangridge/Desktop/Project/spacex-launches/src/Containers/MainContainer.js":"7"},{"size":500,"mtime":1607701523320,"results":"8","hashOfConfig":"9"},{"size":219,"mtime":1607873438219,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1607701523322,"results":"11","hashOfConfig":"9"},{"size":1122,"mtime":1607873434640,"results":"12","hashOfConfig":"9"},{"size":511,"mtime":1607871010827,"results":"13","hashOfConfig":"9"},{"size":177,"mtime":1607871013620,"results":"14","hashOfConfig":"9"},{"size":1833,"mtime":1607872058349,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1o047ab",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":3,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},"/Users/nathanlangridge/Desktop/Project/spacex-launches/src/index.js",[],["33","34"],"/Users/nathanlangridge/Desktop/Project/spacex-launches/src/App.js",[],"/Users/nathanlangridge/Desktop/Project/spacex-launches/src/reportWebVitals.js",[],"/Users/nathanlangridge/Desktop/Project/spacex-launches/src/Containers/LaunchContainer.js",["35","36"],"/Users/nathanlangridge/Desktop/Project/spacex-launches/src/Components/LaunchSelector.js",[],"/Users/nathanlangridge/Desktop/Project/spacex-launches/src/Components/LaunchDetail.js",[],"/Users/nathanlangridge/Desktop/Project/spacex-launches/src/Containers/MainContainer.js",["37","38","39","40","41","42"],"import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport LaunchSelector from '../Components/LaunchSelector';\nimport LaunchDetail from '../Components/LaunchDetail';\n\nclass MainContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            launches: [],\n        }\n        this.findLaunchByYear = this.findLaunchByYear.bind(this);\n    }\n\n    componentDidMount() {\n        const request = new Request()\n\n        const promise1 = request.get('/api/launches');\n        const promises = [promise1]\n\n        Promise.all(promises).then((data) => {\n            this.setState({\n                launches: data[0]._embedded.launches\n            })\n        })\n    }\n\n    findLaunchByYear(year) {\n        const launch = this.state.launches.find((launch) => {\n            return launch.year === parseInt(year)\n        })\n        return launch;\n    }\n\n    render() {\n        return (\n            <div className=\"main-container-div\">\n                <Router>\n                    <React.Fragment>\n                        <Switch>\n\n                            <Route exact path=\"/launches\" render={(props) => {\n                                return <LaunchList launches={this.state.launches} />\n                            }} />\n\n                            <Route exact path=\"/launches/year\" render={(props) => {\n\n                                const id = parseInt(props.match.params.id);\n                                const launch = this.findLaunchByYear(year);\n                                return <LaunchDetails launch={launch}/>\n                            }} />\n\n                        </Switch>\n                    </React.Fragment>\n                </Router>\n            </div>\n        )\n    }\n}\n\nexport default MainContainer;\n",["43","44"],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":2,"column":8,"nodeType":"51","messageId":"52","endLine":2,"endColumn":22},{"ruleId":"49","severity":1,"message":"53","line":3,"column":8,"nodeType":"51","messageId":"52","endLine":3,"endColumn":20},{"ruleId":"49","severity":1,"message":"50","line":3,"column":8,"nodeType":"51","messageId":"52","endLine":3,"endColumn":22},{"ruleId":"49","severity":1,"message":"53","line":4,"column":8,"nodeType":"51","messageId":"52","endLine":4,"endColumn":20},{"ruleId":"54","severity":2,"message":"55","line":43,"column":41,"nodeType":"56","endLine":43,"endColumn":51},{"ruleId":"49","severity":1,"message":"57","line":48,"column":39,"nodeType":"51","messageId":"52","endLine":48,"endColumn":41},{"ruleId":"58","severity":2,"message":"59","line":49,"column":70,"nodeType":"51","messageId":"60","endLine":49,"endColumn":74},{"ruleId":"54","severity":2,"message":"61","line":50,"column":41,"nodeType":"56","endLine":50,"endColumn":54},{"ruleId":"45","replacedBy":"62"},{"ruleId":"47","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'LaunchSelector' is defined but never used.","Identifier","unusedVar","'LaunchDetail' is defined but never used.","react/jsx-no-undef","'LaunchList' is not defined.","JSXIdentifier","'id' is assigned a value but never used.","no-undef","'year' is not defined.","undef","'LaunchDetails' is not defined.",["64"],["65"],"no-global-assign","no-unsafe-negation"]